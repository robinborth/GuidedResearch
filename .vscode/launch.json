{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug: PCG Sampling",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/pcg_sampling.py",
            "args": [
                "task_name=pcg_sampling",
                "optimizer=gauss_newton",
                "loss=point2plane",
                "pcg_sampling_trainer.max_samplings=10"
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: PCG Training",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/pcg_training.py",
            "args": [
                "task_name=pcg_debug",
                "model.optimizer.lr=6e-04",
                "model.max_iter=4",
                "data.batch_size=1024",
                "trainer.max_epochs=500",
                // "model.loss._target_=lib.optimizer.pcg.L1SolutionLoss",
                "model.loss._target_=lib.optimizer.pcg.InverseLoss",
                // "+model.loss.residual_weight=0.1",
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: LM Optimizer",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/optimize.py",
            "args": [
                "optimizer=levenberg_marquardt",
                "optimizer.verbose=False",
                "loss=regularization",
                "loss.chain.shape_regularization=1e-04",
                "loss.chain.expression_regularization=1e-04",
                // "joint_trainer=null",
                // "joint_trainer.max_iters=300",
                // "joint_trainer.max_optims=100",
                // "joint_trainer.scheduler.milestones=[0,50,100]",
                // "sequential_trainer.max_optims=5",
                // "sequential_trainer.kernel_size=4",
                // "sequential_trainer.stride=4",
                // "sequential_trainer.dilation=2",
                // "sequential_trainer.scheduler.milestones=[0,2]",
                // "sequential_trainer.scheduler.params=[[global_pose,transl,neck_pose,eye_pose],[shape_params,expression_params]]",
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: GN Optimizer",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/optimize.py",
            "args": [
                "optimizer=gauss_newton",
                // "optimzier.lin_solver.dim=6",
                "joint_trainer.init_idxs=[0]",
                "joint_trainer.max_iters=1",
                "joint_trainer.max_optims=1",
                "joint_trainer.scheduler.milestones=[0]",
                "joint_trainer.scheduler.params=[[global_pose,transl]]",
                "joint_trainer.coarse2fine.milestones=[0]",
                "joint_trainer.coarse2fine.scales=[8]",
                "sequential_trainer=null",
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: ADAM Optimizer",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/optimize.py",
            "args": [
                "tags=['adam']",
                "optimizer=adam",
                "joint_trainer.max_iters=3",
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: Point2Plane Flame",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/optimize.py",
            "args": [
                "model=flame",
                "data=flame",
                "logger=tensorboard",
                "model.lr=5e-03",
                "model.init_mode=flame",
                "model.vertices_mask=full",
                "trainer.max_epochs=150",
                "trainer.accelerator=gpu",
                "scheduler.coarse2fine.milestones=[0,100]",
                "scheduler.coarse2fine.scales=[0.1,0.25]",
                "scheduler.optimizer.milestones=[0]",
                "scheduler.optimizer.params=['transl|global_pose']"
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug: Create Video",
            "type": "debugpy",
            "request": "launch",
            "program": "scripts/create_video.py",
            "args": [
                "+framerate=30",
                "+video_dir='/home/borth/GuidedResearch/logs/optimize/runs/2024-06-06_09-47-10/render_normal'"
            ],
            "console": "integratedTerminal",
            "justMyCode": false,
        },
        {
            "name": "Debug Triangles Rasterizer",
            "type": "cppdbg",
            "request": "launch",
            "program": "/home/borth/miniconda3/envs/guided/bin/python",
            "args": [
                "${workspaceFolder}/tests/triangles.py"
            ],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "miDebuggerPath": "/usr/bin/gdb",
            "logging": {
                "moduleLoad": true,
                "trace": true,
                "engineLogging": true
            },
            "internalConsoleOptions": "openOnSessionStart"
        },
        {
            "name": "Debug FLAME Rasterizer",
            "type": "cppdbg",
            "request": "launch",
            "program": "/home/borth/miniconda3/envs/guided/bin/python",
            "args": [
                "${workspaceFolder}/tests/flame.py"
            ],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "miDebuggerPath": "/usr/bin/gdb",
            "logging": {
                "moduleLoad": true,
                "trace": true,
                "engineLogging": true
            },
            "internalConsoleOptions": "openOnSessionStart"
        }
    ]
}